<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CreateProject" xml:space="preserve">
    <value>Create project</value>
  </data>
  <data name="ActiveProject" xml:space="preserve">
    <value>Active project</value>
  </data>
  <data name="Tags" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="AddTag" xml:space="preserve">
    <value>Add tag</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ResetToDefaults" xml:space="preserve">
    <value>Reset to defaults</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="Accent" xml:space="preserve">
    <value>Accent</value>
  </data>
  <data name="ExpandEntries" xml:space="preserve">
    <value>Expand entries</value>
  </data>
  <data name="NewEntry" xml:space="preserve">
    <value>New entry</value>
  </data>
  <data name="AddAnother" xml:space="preserve">
    <value>Add another</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="EntrySummary" xml:space="preserve">
    <value>Summary of the entry</value>
  </data>
  <data name="EntryDetails" xml:space="preserve">
    <value>Details of the entry (Markdown is supported)</value>
  </data>
  <data name="EditEntry" xml:space="preserve">
    <value>Edit entry</value>
  </data>
  <data name="ManageProjects" xml:space="preserve">
    <value>Manage projects</value>
  </data>
  <data name="ManageTags" xml:space="preserve">
    <value>Manage tags</value>
  </data>
  <data name="AddNewEntry" xml:space="preserve">
    <value>Add new entry</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchAllEntriesTagged" xml:space="preserve">
    <value>Search all entries tagged 'abc'</value>
  </data>
  <data name="SearchAllCompletedEntries" xml:space="preserve">
    <value>Search all completed entries</value>
  </data>
  <data name="SearchAllOpenEntries" xml:space="preserve">
    <value>Search all open entries</value>
  </data>
  <data name="SearchIsDoneUsingAND" xml:space="preserve">
    <value>Search is done using AND</value>
  </data>
  <data name="SearchAllEntriesContaining" xml:space="preserve">
    <value>Search all containing 'test 123' in details</value>
  </data>
  <data name="SearchDidNotReturnAnyMatches" xml:space="preserve">
    <value>Your search did not return any matches</value>
  </data>
  <data name="NoProjectsDefined" xml:space="preserve">
    <value>No projects defined</value>
  </data>
  <data name="NoEntriesDefined" xml:space="preserve">
    <value>No entries defined</value>
  </data>
  <data name="NoTagsDefinedForProject" xml:space="preserve">
    <value>No tags defined for this project</value>
  </data>
  <data name="DeleteEntry" xml:space="preserve">
    <value>Delete entry</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="SearchMatches" xml:space="preserve">
    <value>Search matches: {0}</value>
  </data>
  <data name="OpenEntries" xml:space="preserve">
    <value>Open: {0}</value>
  </data>
  <data name="TotalEntries" xml:space="preserve">
    <value>Total: {0}</value>
  </data>
  <data name="PleaseWait" xml:space="preserve">
    <value>Please wait...</value>
  </data>
  <data name="ProjectMustHaveName" xml:space="preserve">
    <value>Project must have a name</value>
  </data>
  <data name="ThisNameIsAlreadyUsed" xml:space="preserve">
    <value>This name is already used</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="DoYouReallyWantToDeleteProjectXXX" xml:space="preserve">
    <value>Do you really want to delete the project '{0}'?</value>
  </data>
  <data name="TagMustHaveName" xml:space="preserve">
    <value>Tag must have a name</value>
  </data>
  <data name="DoYouReallyWantToDeleteTagXXX" xml:space="preserve">
    <value>Do you really want to delete the tag '{0}'?</value>
  </data>
  <data name="DoYouReallyWantToDeleteThisEntry" xml:space="preserve">
    <value>Do you really want to delete this entry?</value>
  </data>
  <data name="EntryNeedsSummary" xml:space="preserve">
    <value>Entry needs summary</value>
  </data>
  <data name="MarkdownSupported" xml:space="preserve">
    <value>(Markdown supported)</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="ReportError" xml:space="preserve">
    <value>Report error</value>
  </data>
  <data name="VersionInfo" xml:space="preserve">
    <value>Version {0}</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="DatabasePath" xml:space="preserve">
    <value>Database path</value>
  </data>
  <data name="OpenFolder" xml:space="preserve">
    <value>Open folder</value>
  </data>
  <data name="MoveDatabase" xml:space="preserve">
    <value>Move database</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="MoveDatabaseMessage" xml:space="preserve">
    <value>After moving the database, the application will be restarted.</value>
  </data>
  <data name="NewDatabasePath" xml:space="preserve">
    <value>New database path</value>
  </data>
  <data name="Move" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="MustEnterValidPath" xml:space="preserve">
    <value>Path must be valid</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="EnterNewDatabasePath" xml:space="preserve">
    <value>Enter new database path</value>
  </data>
  <data name="MovingDatabase" xml:space="preserve">
    <value>Moving database</value>
  </data>
  <data name="StartMinimized" xml:space="preserve">
    <value>Start minimized</value>
  </data>
  <data name="StartWithWindows" xml:space="preserve">
    <value>Start with windows</value>
  </data>
  <data name="ShowWindow" xml:space="preserve">
    <value>Show window</value>
  </data>
  <data name="Quit" xml:space="preserve">
    <value>Quit</value>
  </data>
  <data name="CloseToTray" xml:space="preserve">
    <value>Close to tray</value>
  </data>
  <data name="OverwriteExisting" xml:space="preserve">
    <value>Overwrite existing database</value>
  </data>
  <data name="OverwriteExistingDatabaseTooltip" xml:space="preserve">
    <value>If you leave this unchecked the app will use the existing database from now on.</value>
  </data>
  <data name="NewEntryNotMatched" xml:space="preserve">
    <value>Entry was added successfully. It is not displayed because it doesn't match the active search.</value>
  </data>
</root>